# .github/workflows/ci.yml
# 此工作流用于自动化代码检查、构建并发布支持 amd64 和 arm64 的多架构 Docker 镜像

name: CI/CD - Build and Push Multi-Arch Docker Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # --- 任务1: 代码规范检查 (Lint) ---
  lint:
    name:  Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          if [ -f openai_api/requirements.txt ]; then pip install -r openai_api/requirements.txt; fi

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  # --- 任务2: 构建并推送多架构 Docker 镜像 ---
  build-and-push-docker:
    name: Build and Push Multi-Arch Docker Image
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # 步骤 1: 检出代码 (获取完整历史)
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 步骤 2: 计算提交次数作为版本号
      - name: Get Commit Count
        run: echo "COUNT=$(git rev-list --count HEAD)" >> $GITHUB_ENV

      # 步骤 3: 设置 QEMU
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 步骤 4: 设置 Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 步骤 5: 登录到 GitHub Container Registry (GHCR)
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set owner to lowercase
        run: echo "OWNER_LC=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      # 步骤 6: 构建并推送多架构镜像      
      - name: Build and push Multi-Arch image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          # 修正后的标签规则：
          # 1. 使用转为小写的用户名: ${{ env.OWNER_LC }}
          # 2. 镜像名固定为 openai-api
          # 3. 版本号为 b + commit 序号
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/openai-api:b${{ env.COUNT }}
            ghcr.io/${{ env.OWNER_LC }}/openai-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
